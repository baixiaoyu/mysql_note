percona关于页分裂和页合并的介绍及测试
https://www.percona.com/blog/2017/04/10/innodb-page-merging-and-page-splitting/


在mysql的开发规范中，我们一直是推荐必须使用自增主键作为唯一键的，不管是从性能，维护的角度来说，都是必须的。
下面在性能的角度去对比下mysql中没有主键的表，包含非自增主键的表及包含自增主键的表在插入的方面的性能对比。

包含主键约束，在插入的时候校验可能会花费一些时间，但是在生成默认主键的时候也有时间开销，那么这两部分的时间究竟哪个长，下面来进行测试。

只是插入，没有删除，所以表上是没有什么碎片的。

这个是表中没有主键的情况下的插入数据
INFO[2018-03-12T11:33:44+08:00] Starting                                     
23m17s [====================================================================] 100%
INFO[2018-03-12T11:57:05+08:00] 555350 rows inserted

下面是页分裂的情况
mysql> select * from INFORMATION_SCHEMA.INNODB_METRICS where name ='index_page_splits'\G
*************************** 1. row ***************************
           NAME: index_page_splits
      SUBSYSTEM: index
          COUNT: 19911
      MAX_COUNT: 19911
      MIN_COUNT: NULL
      AVG_COUNT: 13.282855236824549
    COUNT_RESET: 19911
MAX_COUNT_RESET: 19911
MIN_COUNT_RESET: NULL
AVG_COUNT_RESET: NULL
   TIME_ENABLED: 2018-03-14 14:47:31
  TIME_DISABLED: NULL
   TIME_ELAPSED: 1499
     TIME_RESET: NULL
         STATUS: enabled
           TYPE: counter
        COMMENT: Number of index page splits


这个是有非自增主键的情况下插入数据
INFO[2018-03-12T13:37:56+08:00] Starting                                     
23m25s [====================================================================] 100%
INFO[2018-03-12T14:01:24+08:00] 555350 rows inserted    

mysql> select * from INFORMATION_SCHEMA.INNODB_METRICS where name ='index_page_splits'\G
*************************** 1. row ***************************
           NAME: index_page_splits
      SUBSYSTEM: index
          COUNT: 31866
      MAX_COUNT: 31866
      MIN_COUNT: NULL
      AVG_COUNT: 20.092055485498108
    COUNT_RESET: 31866
MAX_COUNT_RESET: 31866
MIN_COUNT_RESET: NULL
AVG_COUNT_RESET: NULL
   TIME_ENABLED: 2018-03-14 15:15:00
  TIME_DISABLED: NULL
   TIME_ELAPSED: 1586
     TIME_RESET: NULL
         STATUS: enabled
           TYPE: counter
        COMMENT: Number of index page splits
1 row in set (0.00 sec)


[bjbaixiaoyu@hz-10-200-142-50 ~]$ ./mysql_random_data_loader test my_test_auto 555350 --host=127.0.0.1 --port=3306 --user=root --password=Admin@lmLCiUAT*
INFO[2018-03-12T14:08:10+08:00] Starting                                     
23m18s [====================================================================] 100%
INFO[2018-03-12T14:31:32+08:00] 555350 rows inserted  

mysql> select * from INFORMATION_SCHEMA.INNODB_METRICS where name ='index_page_splits'\G
*************************** 1. row ***************************
           NAME: index_page_splits
      SUBSYSTEM: index
          COUNT: 19596
      MAX_COUNT: 19596
      MIN_COUNT: NULL
      AVG_COUNT: 8.018003273322423
    COUNT_RESET: 19596
MAX_COUNT_RESET: 19596
MIN_COUNT_RESET: NULL
AVG_COUNT_RESET: NULL
   TIME_ENABLED: 2018-03-14 15:44:44
  TIME_DISABLED: NULL
   TIME_ELAPSED: 2444
     TIME_RESET: NULL
         STATUS: enabled
           TYPE: counter
        COMMENT: Number of index page splits
1 row in set (0.01 sec)

用general log看了下这个工具的执行，如果表上没有自增主键，那么他在插入数据的时候是没有id字段的。所以从效果上来看，自增主键的效果是最好的，但是比无主键的情况就是稍微好一些而已，但是比非自增主键的情况要好太多。

看到在插入55w数据的情况下，生成默认主键和自增主键的耗时差不多，在非自增主键的情况下，虽然是慢，但是也就相差几秒，没有想象中的差距很多的情况发生，这个应该是mysql内部优化过了的。否则主键是随机值，那么在插入的情况下主键要排序，移动数据的，肯定要慢很多，但实际上却没有发生。

表结构：
 my_test | CREATE TABLE `my_test` (
  `TABLE_CATALOG` varchar(512) NOT NULL DEFAULT '',
  `TABLE_SCHEMA` varchar(64) NOT NULL DEFAULT '',
  `TABLE_NAME` varchar(64) NOT NULL DEFAULT '',
  `TABLE_TYPE` varchar(64) NOT NULL DEFAULT '',
  `ENGINE` varchar(64) DEFAULT NULL,
  `VERSION` bigint(21) unsigned DEFAULT NULL,
  `ROW_FORMAT` varchar(10) DEFAULT NULL,
  `TABLE_ROWS` bigint(21) unsigned DEFAULT NULL,
  `AVG_ROW_LENGTH` bigint(21) unsigned DEFAULT NULL,
  `DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,
  `MAX_DATA_LENGTH` bigint(21) unsigned DEFAULT NULL,
  `INDEX_LENGTH` bigint(21) unsigned DEFAULT NULL,
  `DATA_FREE` bigint(21) unsigned DEFAULT NULL,
  `AUTO_INCREMENT` bigint(21) unsigned DEFAULT NULL,
  `CREATE_TIME` datetime DEFAULT NULL,
  `UPDATE_TIME` datetime DEFAULT NULL,
  `CHECK_TIME` datetime DEFAULT NULL,
  `TABLE_COLLATION` varchar(32) DEFAULT NULL,
  `CHECKSUM` bigint(21) unsigned DEFAULT NULL,
  `CREATE_OPTIONS` varchar(255) DEFAULT NULL,
  `TABLE_COMMENT` varchar(2048) NOT NULL DEFAULT '',
  `id` int(11) NOT NULL,
  KEY `idx_create_time` (`CREATE_TIME`),
  KEY `idx_name` (`TABLE_NAME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 |


----需要看下page split的情况，这个是我最想要看的，用下面的方式去监控。


I have since found the index_page_splits metric on INFORMATION_SCHEMA.INNODB_METRICS which may be what I am looking for. In my testing, in-order inserts into a table with an integer auto_increment key generate ~40% fewer page splits than random inserts into a table with an integer PK. Other metrics such as index_page_merge_attempts may also be relevant but I've yet to test them thoroughly.


