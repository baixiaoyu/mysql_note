由于该函数总是在事务提交时才被调用到，因此我们也可以把history list lengh理解为尚未被清理update undo的事务数.在update/delete为主的工作负载中，可能会看到length明显的增大


https://yq.aliyun.com/articles/40992



下面是对history list length的测试

在会话1中开一个事物，查看status，下面我们能看到每个事务使用的undo情况
 SELECT TRX_ID FROM INFORMATION_SCHEMA.INNODB_TRX  WHERE TRX_MYSQL_THREAD_ID = CONNECTION_ID();查看当前会话的事务id
 ------------
TRANSACTIONS           ---事务的总体信息
------------
Trx id counter 75571     ---这个是下一个事务的事务id
Purge done for trx's n:o < 75571 undo n:o < 0 state: running but idle
History list length 353    --此处的值会随着事务的增多而变多
LIST OF TRANSACTIONS FOR EACH SESSION:   --事务的明细
---TRANSACTION 0, not started
MySQL thread id 5, OS thread handle 0x2024, query id 93 localhost ::1 root init
show engine innodb status
---TRANSACTION 75566, ACTIVE 3 sec
1 lock struct(s), heap size 312, 0 row lock(s), undo log entries 1
MySQL thread id 8, OS thread handle 0x1450, query id 92 localhost ::1 root cleaning up
---TRANSACTION 75565, ACTIVE 206 sec
1 lock struct(s), heap size 312, 0 row lock(s), undo log entries 1
MySQL thread id 7, OS thread handle 0x318c, query id 87 localhost ::1 root cleaning up
---TRANSACTION 75555, ACTIVE 367 sec  --活动的时间，事务没有提交，这个时间就一直增长
1 lock struct(s), heap size 312, 0 row lock(s), undo log entries 3
MySQL thread id 4, OS thread handle 0x156c, query id 86 localhost ::1 root cleaning up
--------


查看事务具体执行的命令的方法 ， 及rr模式下history list变长导致的select变慢问题。rc下不存在这个问题，又一个理由不使用rr
https://www.percona.com/blog/2017/05/08/chasing-a-hung-transaction-in-mysql-innodb-history-length-strikes-back/


对于这个history list变成导致正在运行的sql变慢的问题，是不相关的事务没有提交导致整体的history list越来越长，从而导致select去查询多个版本的数据，导致慢，相对来说可以算是个bug.,rc下没有这个问题。


关于为什么要设置innodb_buffer_pool_dump_at_shutdown   innodb_buffer_pool_load_at_startup这两个参数有找到了新的理由：
https://www.percona.com/blog/2014/10/17/innodb-transaction-history-often-hides-dangerous-debt/